#!/bin/bash 
set -e 
# any error, and this script will exit
IMAGE_FILE=$(readlink -f "latest.img")
ROOT_UID=0
if [ $UID != $ROOT_UID ]; then
    echo "Please run this script with administrator rights."
    exit 1
fi

HDD_DEV=$1
if [ -s "$IMAGE_FILE" ]; then
    echo "Image file is: ${IMAGE_FILE}"
else
    echo "Image file not found: '${IMAGE_FILE}'"
    exit 3
fi

if [ -e $HDD_DEV ]; then
    echo "Target device: ${HDD_DEV}"
else
    echo "Target device not found - ${HDD_DEV}"
    exit 4
fi

if mount | grep ${HDD_DEV} > /dev/null; then
    echo "Target device is mounted, cannot continue."
    echo "Please unmount first."
    exit 6
fi

echo "All data on $HDD_DEV will be lost"
read -r -p "Are you sure? [y/N] " response
case $response in 
    [yY][eE][sS]|[yY])
        ;;
    *)
        echo "User aborted."
        exit 2
        ;;
esac

START_STRING="Disk ${HDD_DEV}:"
CUT_LENGTH=${#START_STRING}
REGEX='(\d+ \)'
#HDSIZE=`sudo hdparm -I $HDD_DEV | grep GB`
HDSIZE=`sudo parted $HDD_DEV unit GiB print | grep "$START_STRING"`
LEN=$((${#HDSIZE}-$CUT_LENGTH-2))

#echo $HDSIZE

SIZE="${HDSIZE:$CUT_LENGTH:$LEN}"

IDX=`expr index $SIZE "."`
if [[ $IDX -gt "0" ]]; then
    SIZE=${SIZE:0:$IDX}
fi

RESERVE_SIZE=`expr $SIZE - 40`
STARTING=`expr $SIZE - 100`

if [[ $STARTING -gt $RESERVE_SIZE ]]; then
    BOUNDARY=$STARTING
else
    BOUNDARY=$RESERVE_SIZE
fi
if [[ $BOUNDARY -lt 40 ]]; then
    BOUNDARY=40
fi
SWAP=`expr $BOUNDARY + 4`

echo "Boundary: ${BOUNDARY}GiB"
echo "Swap: ${SWAP}GiB"

echo "creating partitions...."
# umount $HDD_DEV
parted -a optimal -s $HDD_DEV -- mklabel msdos \
    mkpart primary ext4 1 6GiB \
    mkpart extended ${BOUNDARY}GiB 100% \
    mkpart logical linux-swap ${BOUNDARY}GiB ${SWAP}GiB \
    mkpart logical ext4 ${SWAP}GiB 100%

mkswap -L swap ${HDD_DEV}5 
mkfs.ext4 -L linux-mate ${HDD_DEV}1 
mkfs.ext4 -L home-rw ${HDD_DEV}6 
echo "checking if ${HDD_DEV}1 is mounted..."
if mount | grep ${HDD_DEV}1 > /dev/null; then
    echo "is mounted, will unmount"
    umount ${HDD_DEV}1
else
    echo "not mounted, good."
fi
echo "Writing master image to ${HDD_DEV}1..."
pv "$IMAGE_FILE" | dd of=${HDD_DEV}1 

mount ${HDD_DEV}1 `pwd`/linux-mate

/usr/sbin/grub-install ${HDD_DEV}1 --boot-directory=`pwd`/linux-mate
echo "Resizing partition..."

parted -a optimal -s $HDD_DEV -- resizepart 1 40GiB
echo "Resizing filesystem..."
e2fsck -f ${HDD_DEV}1
resize2fs ${HDD_DEV}1 

